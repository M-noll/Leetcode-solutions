    class FoodRatings {
    private Map<String, String> foodToCuisine;
    private Map<String, Integer> foodToRating;
    private Map<String, TreeSet<String>> cuisineToFoods;
    private Map<String, Comparator<String>> cuisineComparator;

    public FoodRatings(String[] foods, String[] cuisines, int[] ratings) {
        foodToCuisine = new HashMap<>();
        foodToRating = new HashMap<>();
        cuisineToFoods = new HashMap<>();
        cuisineComparator = new HashMap<>();

        for (int i = 0; i < foods.length; i++) {
            String food = foods[i];
            String cuisine = cuisines[i];
            int rating = ratings[i];

            foodToCuisine.put(food, cuisine);
            foodToRating.put(food, rating);

            // Create comparator for each cuisine only once
            cuisineComparator.putIfAbsent(cuisine, (a, b) -> {
                int ratingA = foodToRating.get(a);
                int ratingB = foodToRating.get(b);
                if (ratingA != ratingB) return ratingB - ratingA; // higher rating first
                return a.compareTo(b); // lexicographical if tie
            });

            cuisineToFoods
                .computeIfAbsent(cuisine, k -> new TreeSet<>(cuisineComparator.get(cuisine)))
                .add(food);
        }
    }

    public void changeRating(String food, int newRating) {
        String cuisine = foodToCuisine.get(food);
        TreeSet<String> foods = cuisineToFoods.get(cuisine);

        // Remove, update rating, then re-insert so TreeSet order updates
        foods.remove(food);
        foodToRating.put(food, newRating);
        foods.add(food);
    }

    public String highestRated(String cuisine) {
        // TreeSet is sorted so the first element is the highest rated
        return cuisineToFoods.get(cuisine).first();
    }
}
